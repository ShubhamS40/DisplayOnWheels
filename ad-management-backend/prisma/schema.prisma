generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model DriverRegistration {
  id                   String             @id @default(uuid())
  fullName             String
  email                String             @unique
  contactNumber        String
  vehicleType          DriverVehicleType
  vehicleNumber        String
  password             String
  acceptedTerms        Boolean
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  passwordResetToken   String?            
  passwordResetExpires DateTime? 

  otp                  String?            // üîê OTP for email verification
  otpExpires           DateTime?          // üïí Expiration time for OTP
  isEmailVerified      Boolean            @default(false)

  // üìÑ Relation to documents
  documents            DriverDocuments?
}

model DriverDocuments {
  id                    String   @id @default(uuid())
  driverId              String   @unique
  photoUrl              String
  idCardUrl             String
  drivingLicenseUrl     String
  vehicleImageUrl       String
  bankProofUrl          String

  // üè¶ Bank Details
  branchName            String
  bankName              String
  ifscCode              String
  accountNumber         String

  // ‚úÖ Document statuses
  photoStatus           String   @default("PENDING") // APPROVED | REJECTED | PENDING
  idCardStatus          String   @default("PENDING")
  drivingLicenseStatus  String   @default("PENDING")
  vehicleImageStatus    String   @default("PENDING")
  bankProofStatus       String   @default("PENDING")

  // ‚úÖ Overall verification status and admin message
  verificationStatus    String   @default("PENDING") // APPROVED | REJECTED | PENDING
  adminMessage          String?  // Custom message from admin if rejected

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  driver                DriverRegistration @relation(fields: [driverId], references: [id], onDelete: Cascade)
}

enum DriverVehicleType {
  Hatchback
  SUV
  Sedan
  Compact
  Convertible
  Coupe
  Crossover
  Minivan
  Autorickshaw
  Pickup_Truck
  Van
  Wagon
  Other
}
